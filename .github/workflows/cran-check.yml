name: CRAN Release Check

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  R_KEEP_PKG_SOURCE: yes
  R_REMOTES_NO_ERRORS_FROM_WARNINGS: true

jobs:
  cran-check:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Temporarily disabled for debugging Windows CI
          # - os: ubuntu-latest
          #   r: 'release'
          # - os: macos-latest
          #   r: 'release'
          - os: windows-latest
            r: 'release'
    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.r }}
          use-public-rspm: true

      - uses: r-lib/actions/setup-pandoc@v2

      - name: Setup environment and install dependencies (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          # Setup virtual display (Linux)
          if [ "$RUNNER_OS" = "Linux" ]; then
            Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
            echo "export DISPLAY=:99" >> $GITHUB_ENV
            
            # Install system dependencies
            sudo apt-get update
            sudo apt-get install -y cmake build-essential libblas-dev liblapack-dev libglpk40 libglpk-dev libglib2.0-dev libgl1-mesa-dev libglu1-mesa-dev xvfb pkg-config openjdk-11-jdk
            echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
            echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" = "macOS" ]; then
            # macOS dependencies
            brew install cmake glib mesa pkg-config openjdk@11
            echo "PKG_CONFIG_PATH=$(brew --prefix glib)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
            if [ -d "/usr/local/opt/openjdk@11/" ]; then
              echo "JAVA_HOME=/usr/local/opt/openjdk@11/libexec/openjdk.jdk/Contents/Home" >> $GITHUB_ENV
            fi
          fi
          
          # Verify Java installation
          java -version

      - name: Setup environment and install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          # Windows dependencies using PowerShell
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
          choco install pkgconfiglite -y
          choco install openjdk11 -y
          
          # Install MSYS2 for GLib and other Unix tools
          choco install msys2 -y
          
          # Add MSYS2 to PATH
          echo "C:\tools\msys64\usr\bin" >> $env:GITHUB_PATH
          echo "C:\tools\msys64\mingw64\bin" >> $env:GITHUB_PATH
          
          # Install GLib via MSYS2
          C:\tools\msys64\usr\bin\bash.exe -lc "pacman -S --noconfirm mingw-w64-x86_64-glib2 mingw-w64-x86_64-pkg-config mingw-w64-x86_64-cmake mingw-w64-x86_64-gcc"
          
          # Set environment variables
          echo "JAVA_HOME=C:\Program Files\Eclipse Adoptium\jdk-11.0.16.101-hotspot" >> $env:GITHUB_ENV
          echo "PKG_CONFIG_PATH=C:\tools\msys64\mingw64\lib\pkgconfig" >> $env:GITHUB_ENV
          echo "PATH=C:\tools\msys64\mingw64\bin;C:\tools\msys64\usr\bin;$env:PATH" >> $env:GITHUB_ENV
          
          # Verify installations
          java -version
          pkg-config --version
          pkg-config --modversion glib-2.0
        shell: pwsh

      - name: Install R packages (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          R -e "install.packages(c('remotes', 'rcmdcheck'))"
          R -e "remotes::install_deps(dependencies = TRUE)"
          R -e "remotes::install_cran(c('devtools', 'roxygen2', 'spelling', 'rhub'))"
          
          # Install platform-specific packages
          if [ "$RUNNER_OS" = "macOS" ]; then
            R -e "tryCatch(install.packages('rgl', type = 'source'), error = function(e) install.packages('rgl'))"
            R -e "install.packages('OpenStreetMap')"
            R -e "library(rgl)"
          fi

      - name: Install R packages (Windows)
        if: runner.os == 'Windows'
        run: |
          R.exe -e "options(repos = 'https://cran.rstudio.com/')"
          R.exe -e "install.packages(c('remotes', 'rcmdcheck'), type = 'binary')"
          R.exe -e "remotes::install_deps(dependencies = TRUE)"
          R.exe -e "install.packages(c('devtools', 'roxygen2', 'spelling'), type = 'binary')"
          R.exe -e "tryCatch(install.packages('rhub', type = 'binary'), error = function(e) message('rhub install failed, continuing...'))"
          R.exe -e "tryCatch(install.packages('rgl', type = 'binary'), error = function(e) message('rgl install failed, continuing...'))"
          R.exe -e "tryCatch(install.packages('OpenStreetMap', type = 'binary'), error = function(e) message('OpenStreetMap install failed, continuing...'))"
        shell: pwsh

      - name: Build and check package (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          R -e "devtools::build()"
          Rscript scripts/cran_release_check.R

      - name: Build and check package (Windows)
        if: runner.os == 'Windows'
        run: |
          # Windows-specific build (uses configure.win)
          R.exe -e "devtools::build()"
          Rscript.exe scripts/cran_release_check.R
        shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cran-check-results-${{ matrix.os }}-${{ matrix.r }}
          path: |
            *.tar.gz
            *.zip
            build/
            check.log
            final_check.log 
