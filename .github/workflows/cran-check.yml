name: CRAN Release Check

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  R_KEEP_PKG_SOURCE: yes
  R_REMOTES_NO_ERRORS_FROM_WARNINGS: true

jobs:
  cran-check:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            r: 'release'
    steps:
      - uses: actions/checkout@v4

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.r }}
          use-public-rspm: true

      - uses: r-lib/actions/setup-pandoc@v2

      - name: Setup virtual display (Linux)
        if: runner.os == 'Linux'
        run: |
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          echo "export DISPLAY=:99" >> $GITHUB_ENV

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libglib2.0-dev libgl1-mesa-dev libglu1-mesa-dev xvfb

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake glib mesa

      - name: Setup Java (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-11-jdk
          echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
          java -version

      - name: Setup Java (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openjdk@11
          if [ -d "/usr/local/opt/openjdk@11/" ]; then
            echo "JAVA_HOME=/usr/local/opt/openjdk@11/libexec/openjdk.jdk/Contents/Home" >> $GITHUB_ENV
            echo "export JAVA_HOME=/usr/local/opt/openjdk@11/libexec/openjdk.jdk/Contents/Home" >> $GITHUB_ENV
          else
            echo "Warning: Could not find Java installation"
          fi
          java -version

      - name: Install R package dependencies
        run: |
          R -e "install.packages(c('remotes', 'rcmdcheck'))"
          R -e "remotes::install_deps(dependencies = TRUE)"
          R -e "remotes::install_cran(c('devtools', 'roxygen2', 'spelling', 'goodpractice'))"

      - name: Install rgl and OpenStreetMap (macOS)
        if: runner.os == 'macOS'
        run: |
          # Install rgl with proper Java support
          # First try to install from source, fallback to binary if needed
          R -e "tryCatch(install.packages('rgl', type = 'source'), error = function(e) install.packages('rgl'))"
          R -e "install.packages('OpenStreetMap')"
          # Verify rgl installation
          R -e "library(rgl)"

      - name: Build package
        run: |
          R -e "devtools::build()"

      - name: Run CRAN release check
        run: |
          Rscript scripts/cran_release_check.R

      - name: Upload check results (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cran-check-results-${{ matrix.os }}-${{ matrix.r }}
          path: |
            check.log
            final_check.log
            *.tar.gz
            *.zip

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}-${{ matrix.r }}
          path: |
            *.tar.gz
            *.zip
            build/ 