#!/bin/bash
PKG_ROOT="$(cd "$(dirname "$0")"; pwd)"

echo "=== movr Package Windows Build Configuration ==="
echo "Package root: ${PKG_ROOT}"

# Check if cmake is available
if ! command -v cmake >/dev/null 2>&1; then
    echo "Error: cmake is required but not found. Please install cmake."
    echo "You can download cmake from: https://cmake.org/download/"
    exit 1
fi

# Detect build environment
if command -v gcc >/dev/null 2>&1; then
    echo "Found GCC compiler (MinGW)"
    BUILD_ENV="MinGW"
elif command -v cl >/dev/null 2>&1; then
    echo "Found MSVC compiler"
    BUILD_ENV="MSVC"
else
    echo "Warning: No suitable compiler found. Trying default..."
    BUILD_ENV="Default"
fi

# Clean previous build
if [ -e "${PKG_ROOT}/build" ]; then
    echo "Cleaning previous build directory..."
    rm -rf "${PKG_ROOT}/build"
fi

# Create build directory
echo "Creating build directory..."
mkdir -p "${PKG_ROOT}/build"

# Run cmake configuration
echo "Running cmake configuration for Windows..."
cd "${PKG_ROOT}/build"

# Configure based on available build environment
if [ "$BUILD_ENV" = "MinGW" ]; then
    echo "Configuring for MinGW..."
    if ! cmake -G "MinGW Makefiles" -Wno-dev ..; then
        echo "Warning: cmake configuration failed for MinGW, trying fallback method..."
        # Fallback: Skip CMake and use R package build system directly
        cd "${PKG_ROOT}"
        echo "Using R package build system directly instead of CMake..."
        # Create a simple Makevars.win that doesn't require CMake
        cat > src/Makevars.win.tmp << 'EOF'
# Simple Windows build without CMake
PKG_CPPFLAGS = -I. -DWIN32_LEAN_AND_MEAN -std=c99
PKG_LIBS = -lws2_32

# Try to use GLib via pkg-config if available
PKG_CONFIG_EXISTS = $(shell pkg-config --exists glib-2.0 && echo yes)
ifeq ($(PKG_CONFIG_EXISTS), yes)
    PKG_CPPFLAGS += $(shell pkg-config --cflags glib-2.0)
    PKG_LIBS += $(shell pkg-config --libs glib-2.0)
endif

all: $(SHLIB)
clean:
	$(RM) *.o *.dll
EOF
        mv src/Makevars.win.tmp src/Makevars.win
        echo "Fallback configuration complete"
        exit 0
    fi
    MAKE_CMD="mingw32-make"
elif [ "$BUILD_ENV" = "MSVC" ]; then
    echo "Configuring for MSVC..."
    if ! cmake -Wno-dev ..; then
        echo "Warning: cmake configuration failed for MSVC, trying fallback method..."
        cd "${PKG_ROOT}"
        echo "Using R package build system directly instead of CMake..."
        cat > src/Makevars.win.tmp << 'EOF'
# Simple Windows build without CMake
PKG_CPPFLAGS = -I. -DWIN32_LEAN_AND_MEAN
PKG_LIBS = -lws2_32

# Try to use GLib via pkg-config if available
PKG_CONFIG_EXISTS = $(shell pkg-config --exists glib-2.0 && echo yes)
ifeq ($(PKG_CONFIG_EXISTS), yes)
    PKG_CPPFLAGS += $(shell pkg-config --cflags glib-2.0)
    PKG_LIBS += $(shell pkg-config --libs glib-2.0)
endif

all: $(SHLIB)
clean:
	$(RM) *.o *.dll
EOF
        mv src/Makevars.win.tmp src/Makevars.win
        echo "Fallback configuration complete"
        exit 0
    fi
    MAKE_CMD="cmake --build . --config Release"
else
    echo "Trying default cmake configuration..."
    if ! cmake -Wno-dev ..; then
        echo "Warning: cmake configuration failed, trying fallback method..."
        cd "${PKG_ROOT}"
        echo "Using R package build system directly instead of CMake..."
        cat > src/Makevars.win.tmp << 'EOF'
# Simple Windows build without CMake
PKG_CPPFLAGS = -I. -DWIN32_LEAN_AND_MEAN -std=c99
PKG_LIBS = -lws2_32

# Try to use GLib via pkg-config if available
PKG_CONFIG_EXISTS = $(shell pkg-config --exists glib-2.0 && echo yes)
ifeq ($(PKG_CONFIG_EXISTS), yes)
    PKG_CPPFLAGS += $(shell pkg-config --cflags glib-2.0)
    PKG_LIBS += $(shell pkg-config --libs glib-2.0)
endif

all: $(SHLIB)
clean:
	$(RM) *.o *.dll
EOF
        mv src/Makevars.win.tmp src/Makevars.win
        echo "Fallback configuration complete"
        exit 0
    fi
    MAKE_CMD="make"
fi

# Build the library
echo "Building library with: ${MAKE_CMD}"
if [ "$BUILD_ENV" = "MSVC" ]; then
    if ! cmake --build . --config Release; then
        echo "Error: MSVC build failed"
        exit 1
    fi
else
    if ! ${MAKE_CMD}; then
        echo "Error: build failed"
        exit 1
    fi
fi

cd "${PKG_ROOT}"

# Determine library name and check if built
unameOut="$(uname -s 2>/dev/null || echo "Windows")"
case "${unameOut}" in
    Linux*|Darwin*) libname=movr.so;;
    CYGWIN*|MINGW*|MSYS*|Windows*) libname=movr.dll;;
    *)          libname=movr.dll;;  # Default to dll for unknown Windows variants
esac
echo "Platform: ${unameOut}"
echo "Expected library: ${libname}"

# Check if library was built in src directory
if [ ! -e "${PKG_ROOT}/src/${libname}" ]; then
    echo "Error: Shared library ${libname} not found in src directory"
    echo "Build may have failed or library may be in a different location"
    
    # Try to find the library in build directory
    if [ -e "${PKG_ROOT}/build/${libname}" ]; then
        echo "Found library in build directory, copying to src..."
        cp "${PKG_ROOT}/build/${libname}" "${PKG_ROOT}/src/"
    elif [ -e "${PKG_ROOT}/build/Release/${libname}" ]; then
        echo "Found library in build/Release directory, copying to src..."
        cp "${PKG_ROOT}/build/Release/${libname}" "${PKG_ROOT}/src/"
    elif [ -e "${PKG_ROOT}/build/Debug/${libname}" ]; then
        echo "Found library in build/Debug directory, copying to src..."
        cp "${PKG_ROOT}/build/Debug/${libname}" "${PKG_ROOT}/src/"
    else
        echo "Could not locate built library"
        exit 1
    fi
fi

echo "Successfully built ${libname} in src directory"

# Clean up build directory to avoid issues with R package build
if [ -e "${PKG_ROOT}/build" ]; then
    echo "Cleaning build directory..."
    rm -rf "${PKG_ROOT}/build"
fi

echo "=== Windows build completed successfully ==="